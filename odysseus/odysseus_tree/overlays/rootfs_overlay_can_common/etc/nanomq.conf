# NanoMQ Configuration 0.19.1

# #============================================================
# # NanoMQ Broker
# #============================================================

system {
	# # num_taskq_thread
	# # Use a specified number of taskq threads 
	# #
	# # Value: 1-255, Obtain automatically if 0
	num_taskq_thread = 0
	
	# # max_taskq_thread
	# # Use a specified maximunm number of taskq threads
	# #
	# # Value: 1-255, Obtain automatically if 0
	max_taskq_thread = 0
	
	# # parallel
	# # Handle a specified maximum number of outstanding requests
	# #
	# # Value: 1-255, Obtain automatically if 0
	parallel = 0
}

mqtt {
	# # max_packet_size
	# # Defines the default max size of a packet that NanoMQ could accept and send
	# #
	# # Hot updatable
	# # Value: 1 Byte-260 MB
	max_packet_size = 100KB # ***
	
	# # max_mqueue_len
	# # The queue length in-flight window
	# # This is essential for performance and memory consumption
	# #
	# # Hot updatable
	# # Value: 1-infinity
	max_mqueue_len = 2048
	
	# # retry_interval (s)
	# # The retry interval is nano qos duration which also controls timer 
	# # interval of each pipe
	# #
	# # Hot updatable
	# # Value: 1-infinity
	retry_interval = 10s
	
	# # The backoff for MQTT keepalive timeout.
	# # broker will discolse client when there is no activity for
	# # 'Keepalive * backoff * timeout.
	# #
	# # Hot updatable
	# # Value: Float > 0.5
	keepalive_multiplier = 1.25
	
	# # property_size
	# # The max size for a MQTT user property
	# #
	# # Hot updatable
	# # Value: 1-infinity
	property_size = 32
	
}

listeners.tcp {
	# # bind
	# # Connect with the host and port
	# #
	# # Value: host:port
	bind = "0.0.0.0:1883"
}

listeners.ws {
	bind = "0.0.0.0:1884"
} # *** apparently this cannot be disabled?

# -------------------- SQLite Config -------------------- ##
sqlite {
	# # Max message limitation for caching
	# # ( 0 means ineffective )
	# # Value: 1-infinity
	disk_cache_size = 102400
	# # Mounted file path 
	# #
	# # Value: path
	# mounted_file_path="/tmp/"
	
	# # The threshold of flushing messages to flash. 
	# #
	# # Hot updatable
	# # Value: 1-infinity
	flush_mem_threshold = 100
	
	# # Resend interval (ms)
	# # The interval for resending the messages after failure recovered. (not related to trigger)
	# # 
	# # Value: 1-infinity 
	#resend_interval = 5000
}

rules.sqlite {
	# # SQLite3 database path
	# # Rule engine db path, default is exec path.
	# # 
	# # Value: File
	path = "/var/log/nanomq_backup.db"
	rules = [
		{
			# # sql
			# # Rule engine sql clause.
			# # 
			# # Value: String
			sql = "SELECT topic, payload FROM *" # ***
			# # SQLite3 database table name
			# # Rule engine db table name.
			# # 
			# # Value: String
			table = broker
		}
	]
}


# # ------------------ Logging Config ------------------ ##
log {
	# # Where to emit the logs.
	# #
	# # - file: write logs to file
	# # - console: write logs to standard I/O
	# # - syslog: write logs to syslog
	# # Value: file | console | syslog
	# # Example: file,console,syslog
	to = [file, console, syslog] # ***
	# # The log severity level.
	# #
	# # Value: trace | debug | info | warn | error | fatal
	# #
	# # Note: Only the messages with severity level higher than or equal to
	# #       this level will be logged.
	# #
	# # Default: warn
	level = warn
	# # The dir for log files.
	# #
	# # Value: Folder
	dir = "/tmp"
	# # The log filename for logs of level specified in "log.level".
	# #
	# # Value: String
	# # Default: nanomq.log
	file = "nanomq.log"
	rotation {
		# # Maximum size of each log file.
		# #
		# # Value: Number
		# # Default: 10M
		# # Supported Unit: KB | MB | GB
		size = 10MB
		# # Maximum rotation count of log files.
		# #
		# # Value: Number
		# # Default: 5
		count = 5
	}
}

#====================================================================
# MQTT Broker Bridge
#====================================================================
# Here, you can use the include syntax of HOCON to put the
# configuration file of the bridge into nanomq_bridge.conf.
#include "/etc/nanomq_bridge.conf" 


plugin {
    libs = [{
        path = "/usr/lib/nanomq/plugin_user_property_timestamp.so"
    }]
}
